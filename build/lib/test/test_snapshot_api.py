# coding: utf-8

"""
    FlashBlade Management API

    The management APIs of FlashBlade.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest
import time

from purity_fb import PurityFb
from purity_fb.models import  Filesystem
from purity_fb.models import SnapshotResponse, Snapshot, SnapshotSuffix

from .environment import HOST, API_TOKEN


def assert_is_snapshot_list(items):
    assert type(items) is list
    for item in items:
        assert type(item) is Snapshot


class TestSnapshotsApi(unittest.TestCase):
    """ SnapshotsApi unit test stubs """

    def setUp(self):
        self.purity_fb = PurityFb(HOST)
        res = self.purity_fb.login(API_TOKEN)
        self.assertTrue(res == 200)
        self.fs_api = self.purity_fb.filesystem_api()
        self.fs_beta_api = self.purity_fb.filesystem_beta_api()
        self.snap_api = self.purity_fb.snapshot_api()
        self.snap_beta_api = self.purity_fb.snapshot_beta_api()
        self.fsa = Filesystem(name='rest_client_fs_for_snap_a')
        self.fsb = Filesystem(name='rest_client_fs_for_snap_b')
        self.clean_up()
        self.fs_api.create(filesystem=self.fsa)
        self.fs_api.create(filesystem=self.fsb)

    def tearDown(self):
        self.clean_up()

    def clean_up(self):
        res = self.fs_api.list(filter='name=\"rest_client_fs_for_snap_*\"')
        for fs in res.items:
            self.fs_beta_api.delete(fs.name)

    def test_create(self):
        """
        Test case for create

        
        """
        response = self.snap_api.create(sources=[self.fsa.name])
        assert type(response) is SnapshotResponse
        assert_is_snapshot_list(response.items)
        assert len(response.items) == 1
        assert response.items[0].source == self.fsa.name

        suffix = "snap" + str(int(time.time()))
        response = self.snap_api.create(sources=[self.fsa.name], suffix=SnapshotSuffix(suffix))
        assert type(response) is SnapshotResponse
        assert_is_snapshot_list(response.items)
        assert len(response.items) == 1
        assert response.items[0].source == self.fsa.name
        assert response.items[0].suffix == suffix


    def test_list(self):
        """
        Test case for list

        
        """
        suffix = "snap" + str(int(time.time()))
        self.snap_api.create(sources=[self.fsb.name], suffix=SnapshotSuffix(suffix))

        response = self.snap_api.list()
        assert type(response) is SnapshotResponse
        assert_is_snapshot_list(response.items)

        response = self.snap_api.list(names_or_sources=[self.fsa.name])
        assert type(response) is SnapshotResponse
        assert_is_snapshot_list(response.items)
        for snapshot in response.items:
            assert snapshot.source == self.fsa.name
            assert snapshot.name.startswith(self.fsa.name + '.')

        snap_name = "%s.%s" % (self.fsb.name, suffix)
        response = self.snap_api.list(names_or_sources=[self.fsa.name, snap_name])
        assert type(response) is SnapshotResponse
        assert_is_snapshot_list(response.items)
        for snapshot in response.items:
            assert snapshot.name == snap_name or snapshot.source == self.fsa.name


if __name__ == '__main__':
    unittest.main()
