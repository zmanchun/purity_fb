# coding: utf-8

"""
    FlashBlade Management API

    The management APIs of FlashBlade.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FilesystemSpace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, size=None, used=None, fraction_used=None, data_reduction=None, physical_used=None, physical_snap_used=None, physical_total_used=None):
        """
        FilesystemSpace - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'size': 'int',
            'used': 'int',
            'fraction_used': 'float',
            'data_reduction': 'float',
            'physical_used': 'int',
            'physical_snap_used': 'int',
            'physical_total_used': 'int'
        }

        self.attribute_map = {
            'size': 'size',
            'used': 'used',
            'fraction_used': 'fraction_used',
            'data_reduction': 'data_reduction',
            'physical_used': 'physical_used',
            'physical_snap_used': 'physical_snap_used',
            'physical_total_used': 'physical_total_used'
        }

        self._size = size
        self._used = used
        self._fraction_used = fraction_used
        self._data_reduction = data_reduction
        self._physical_used = physical_used
        self._physical_snap_used = physical_snap_used
        self._physical_total_used = physical_total_used

    @property
    def size(self):
        """
        Gets the size of this FilesystemSpace.
        the size of the file system in bytes

        :return: The size of this FilesystemSpace.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this FilesystemSpace.
        the size of the file system in bytes

        :param size: The size of this FilesystemSpace.
        :type: int
        """

        self._size = size

    @property
    def used(self):
        """
        Gets the used of this FilesystemSpace.
        usage in bytes

        :return: The used of this FilesystemSpace.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """
        Sets the used of this FilesystemSpace.
        usage in bytes

        :param used: The used of this FilesystemSpace.
        :type: int
        """

        self._used = used

    @property
    def fraction_used(self):
        """
        Gets the fraction_used of this FilesystemSpace.
        usage in fraction

        :return: The fraction_used of this FilesystemSpace.
        :rtype: float
        """
        return self._fraction_used

    @fraction_used.setter
    def fraction_used(self, fraction_used):
        """
        Sets the fraction_used of this FilesystemSpace.
        usage in fraction

        :param fraction_used: The fraction_used of this FilesystemSpace.
        :type: float
        """

        self._fraction_used = fraction_used

    @property
    def data_reduction(self):
        """
        Gets the data_reduction of this FilesystemSpace.
        reduction of data

        :return: The data_reduction of this FilesystemSpace.
        :rtype: float
        """
        return self._data_reduction

    @data_reduction.setter
    def data_reduction(self, data_reduction):
        """
        Sets the data_reduction of this FilesystemSpace.
        reduction of data

        :param data_reduction: The data_reduction of this FilesystemSpace.
        :type: float
        """

        self._data_reduction = data_reduction

    @property
    def physical_used(self):
        """
        Gets the physical_used of this FilesystemSpace.
        physical usage in bytes

        :return: The physical_used of this FilesystemSpace.
        :rtype: int
        """
        return self._physical_used

    @physical_used.setter
    def physical_used(self, physical_used):
        """
        Sets the physical_used of this FilesystemSpace.
        physical usage in bytes

        :param physical_used: The physical_used of this FilesystemSpace.
        :type: int
        """

        self._physical_used = physical_used

    @property
    def physical_snap_used(self):
        """
        Gets the physical_snap_used of this FilesystemSpace.
        physical usage by snapshots in bytes

        :return: The physical_snap_used of this FilesystemSpace.
        :rtype: int
        """
        return self._physical_snap_used

    @physical_snap_used.setter
    def physical_snap_used(self, physical_snap_used):
        """
        Sets the physical_snap_used of this FilesystemSpace.
        physical usage by snapshots in bytes

        :param physical_snap_used: The physical_snap_used of this FilesystemSpace.
        :type: int
        """

        self._physical_snap_used = physical_snap_used

    @property
    def physical_total_used(self):
        """
        Gets the physical_total_used of this FilesystemSpace.
        total physical usage (including snapshots) in bytes

        :return: The physical_total_used of this FilesystemSpace.
        :rtype: int
        """
        return self._physical_total_used

    @physical_total_used.setter
    def physical_total_used(self, physical_total_used):
        """
        Sets the physical_total_used of this FilesystemSpace.
        total physical usage (including snapshots) in bytes

        :param physical_total_used: The physical_total_used of this FilesystemSpace.
        :type: int
        """

        self._physical_total_used = physical_total_used

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FilesystemSpace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
