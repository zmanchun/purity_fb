# coding: utf-8

"""
    FlashBlade Management API

    The management APIs of FlashBlade.

    OpenAPI spec version: beta

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

from purity_fb.models import *
from purity_fb import PurityFb

from .environment import HOST, API_TOKEN


DEMO_LIST = 'test_list'
DEMO_CREATE = 'test_create'
PUSER ='pureuser'
FS_COUNT = 5
DEBUG = True


def print_list(items):
    if items:
        print('[')
        for item in items:
            print(item)
        print(']')


def dl_name(i):
    return DEMO_LIST + str(i)


def dc_name(i):
    return DEMO_CREATE + str(i)


def check_is_filesystem_list(list):
    if list:
        for item in list:
            assert type(item) is Filesystem, 'seen type {}'.format(type(item))


def list_by_filter(api, filter_str):
    print ('Filter: {}...\n'.format(filter_str))
    res = api.list(filter=filter_str)
    if DEBUG:
        print_list(res.items)
    check_is_filesystem_list(res.items)
    return res


def list_and_sort(api, sort_key):
    print ('\nSORT by {}'.format(sort_key))
    res = api.list(sort=sort_key, limit=10)
    if DEBUG:
        print_list(res.items)
    check_is_filesystem_list(res.items)
    return res


def list_by_start(api, start_key):
    print ('\nSTART by {}'.format(start_key))
    res = api.list(start=start_key)
    if DEBUG:
        print_list(res.items)
    check_is_filesystem_list(res.items)
    return res


def list_by_limit(api, limit_key):
    print ('\nLIMIT is {}'.format(limit_key))
    res = api.list(limit=limit_key, _return_http_data_only="False")
    if DEBUG:
        print_list(res.items)
    check_is_filesystem_list(res.items)
    return res


def list_by_token(api, token_key):
    print ('\nTOKEN is {}'.format(token_key))
    res = api.list(token=token_key)
    if DEBUG:
        print_list(res.items)
    check_is_filesystem_list(res.items)
    return res


class TestFileSystemsApi(unittest.TestCase):
    """ FileSystemsApi unit test stubs """

    def setUp(self):
        self.purity_fb = PurityFb(HOST)
        res = self.purity_fb.login(API_TOKEN)
        self.assertTrue(res == 200)
        self.fs_api = self.purity_fb.filesystem_api()
        self.fs_beta_api = self.purity_fb.filesystem_beta_api()
        self.cleanUp()
        for i in range(FS_COUNT):
            fs = Filesystem()
            fs.name = DEMO_LIST + '%d' % i
            fs.nfs = NfsRule(enabled=True)
            self.fs_api.create(filesystem=fs)
            fs.name = DEMO_CREATE + '%d' % i
            self.fs_api.create(filesystem=fs)

    def tearDown(self):
        self.cleanUp()
        self.purity_fb.logout()

    def cleanUp(self):
        res = self.fs_api.list(filter='name=\"' + DEMO_LIST + '*\" or name=\"' + DEMO_CREATE + '*\"')
        fs_list = res.items
        for fs in fs_list:
            self.fs_beta_api.delete(name=fs.name)

    def test_list_basic(self):
        print('LIST all file systems\n')
        res = self.fs_api.list(limit=50)
        if DEBUG:
            print_list(res.items)
        check_is_filesystem_list(res.items)

        names = [dl_name(0), dl_name(1)]
        print('\nLIST file systems by names {}\n'.format(names))
        res = self.fs_api.list(names=names)
        if DEBUG:
            print_list(res.items)

        filter_str = 'name = \'' + DEMO_LIST + '*\''
        print('\nLIST file systems by filter {}\n'.format(filter_str))
        res = self.fs_api.list(filter=filter_str)
        if DEBUG:
            print_list(res.items)
        check_is_filesystem_list(res.items)

        print('\nCREATE file system {}\n'.format(DEMO_CREATE))
        fs = Filesystem()
        fs.name = DEMO_CREATE
        fs.size = "300000"
        fs.nfs_enabled = True
        fs.filesystem_id = 12345678
        try:
            res = self.fs_api.create(filesystem=fs)
        except:
            pass
        if DEBUG:
            print_list(res.items)
        check_is_filesystem_list(res.items)

    def test_filter(self):
        # ----------- test FILTER ------------
        print ('\nLIST file system by filters\n')

        filter_str = 'name = \'' + DEMO_CREATE + '*\''
        list_by_filter(self.fs_api, filter_str)

        filter_str = 'name = \'' + DEMO_LIST + '*\' and not(contains(name, \'2\'))' + ' and created > 1456000'
        list_by_filter(self.fs_api, filter_str)

    def test_sort(self):
        # ------ test SORT ----
        print ('\nLIST file system and sort\n')
        list_and_sort(self.fs_api, 'name')
        list_and_sort(self.fs_api, '(natural)')
        list_and_sort(self.fs_api, 'name-')
        list_and_sort(self.fs_api, 'space.size')
        list_and_sort(self.fs_api, 'space.size-')
        list_and_sort(self.fs_api, 'smb.enabled')

    def test_start(self):
        # ------ test START ----
        print ('\nLIST file system by start\n')
        list_by_start(self.fs_api, 1)
        list_by_start(self.fs_api, 2)

    def demo_limit(self):
        # ------ demo LIMIT ----
        input('\nEnter to list file system by limit\n')
        list_by_limit(self.fs_api, 0)
        list_by_limit(self.fs_api, 1)
        list_by_limit(self.fs_api, 2)
        list_by_limit(self.fs_api, 5)

    def test_token(self):
        # ------ demo TOKEN ----
        print ('\nLIST file system by token\n')
        res = list_by_limit(self.fs_api, 1)
        token = res.pagination_info.continuation_token
        list_by_token(self.fs_api, token)

    def test_combined(self):
        print ('\nLIST file system by combined parameters\n')
        print ('\nLIST by start, limit, filter\n')
        res = self.fs_api.list(start=1, limit=3, filter='name = \'' + DEMO_CREATE + '*\'')
        if DEBUG:
            print_list(res.items)
        check_is_filesystem_list(res.items)

    def test_update(self):
        name = DEMO_CREATE + '0'
        size = 10000
        fs_attr = FilesystemAttr()
        fs_attr.space = SpaceAttr(size=size)
        res = self.fs_api.update(name=name, attributes=fs_attr)
        check_is_filesystem_list(res.items)
        updated_fs = res.items[0]
        self.assertTrue(updated_fs.name == name)
        self.assertTrue(updated_fs.space.size == size)


if __name__ == '__main__':
    unittest.main()
