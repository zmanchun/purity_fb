# coding: utf-8

"""
    FlashBlade Management API

    The management APIs of FlashBlade.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Snapshot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, suffix=None, created=None, id=None, space=None, source=None, source_id=None):
        """
        Snapshot - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'suffix': 'str',
            'created': 'int',
            'id': 'int',
            'space': 'SnapshotSpace',
            'source': 'str',
            'source_id': 'int'
        }

        self.attribute_map = {
            'name': 'name',
            'suffix': 'suffix',
            'created': 'created',
            'id': 'id',
            'space': 'space',
            'source': 'source',
            'source_id': 'source_id'
        }

        self._name = name
        self._suffix = suffix
        self._created = created
        self._id = id
        self._space = space
        self._source = source
        self._source_id = source_id

    @property
    def name(self):
        """
        Gets the name of this Snapshot.
        name of the a (or reference to a) file system or snapshot

        :return: The name of this Snapshot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Snapshot.
        name of the a (or reference to a) file system or snapshot

        :param name: The name of this Snapshot.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def suffix(self):
        """
        Gets the suffix of this Snapshot.
        suffix of snapshot, e.g., snap1

        :return: The suffix of this Snapshot.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """
        Sets the suffix of this Snapshot.
        suffix of snapshot, e.g., snap1

        :param suffix: The suffix of this Snapshot.
        :type: str
        """

        self._suffix = suffix

    @property
    def created(self):
        """
        Gets the created of this Snapshot.
        creation timestamp of snapshot

        :return: The created of this Snapshot.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Snapshot.
        creation timestamp of snapshot

        :param created: The created of this Snapshot.
        :type: int
        """

        self._created = created

    @property
    def id(self):
        """
        Gets the id of this Snapshot.
        snapshot ID

        :return: The id of this Snapshot.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Snapshot.
        snapshot ID

        :param id: The id of this Snapshot.
        :type: int
        """

        self._id = id

    @property
    def space(self):
        """
        Gets the space of this Snapshot.
        the space attribute of a snapshot

        :return: The space of this Snapshot.
        :rtype: SnapshotSpace
        """
        return self._space

    @space.setter
    def space(self, space):
        """
        Sets the space of this Snapshot.
        the space attribute of a snapshot

        :param space: The space of this Snapshot.
        :type: SnapshotSpace
        """

        self._space = space

    @property
    def source(self):
        """
        Gets the source of this Snapshot.
        name of the source file system

        :return: The source of this Snapshot.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Snapshot.
        name of the source file system

        :param source: The source of this Snapshot.
        :type: str
        """

        self._source = source

    @property
    def source_id(self):
        """
        Gets the source_id of this Snapshot.
        the id of the source file system

        :return: The source_id of this Snapshot.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this Snapshot.
        the id of the source file system

        :param source_id: The source_id of this Snapshot.
        :type: int
        """

        self._source_id = source_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Snapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
